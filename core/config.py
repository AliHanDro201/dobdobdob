import os
import logging
from dotenv import load_dotenv

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Загрузка переменных окружения из .env файла
if os.path.exists(".env"):
    load_dotenv(".env")
    logger.info("Переменные окружения загружены из .env")
elif os.path.exists(".evn"):
    load_dotenv(".evn")
    logger.info("Переменные окружения загружены из .evn")
else:
    logger.warning("Файл .env или .evn не найден")

# === OpenAI ===
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SECOND_OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # Для обратной совместимости
GPT_MODEL = "gpt-4o-mini"
GPT_TEMPERATURE = 1.0
GPT_MAX_TOKENS = 2000

# === ElevenLabs ===
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY") or ""
TTS_DEFAULT_VOICE = "ru-RU-SvetlanaNeural"
TTS_MODEL = "eleven_multilingual_v1"

# === Настройки для браузерного чата ===
USE_BROWSER_FOR_ALL_REQUESTS = os.getenv("USE_BROWSER_FOR_ALL_REQUESTS", "1").lower() in ("1", "true", "yes")
CHATGPT_URL = os.getenv("CHATGPT_URL", "https://chat.openai.com/")
HEADLESS_BROWSER = os.getenv("HEADLESS_BROWSER", "1").lower() in ("1", "true", "yes")
ENHANCE_PROMPTS = os.getenv("ENHANCE_PROMPTS", "1").lower() in ("1", "true", "yes")

# === Системный промпт для GPT ===
prompt = """
            - Вас зовут Джарвис. Вы — мой универсальный ИИ-агент для управления компьютером и взаимодействия с внешними сервисами. Теперь вы можете обрабатывать все запросы через браузер, имитируя действия пользователя на сайте ChatGPT.
            - Все ваши запросы автоматически преобразуются в более сложные промпты для получения более качественных ответов от ChatGPT.
            - Вы выполняете команды с большим уважением и кратко, и всегда помогаете. (только если вас не попросят рассказать о чём-то или по подробнее). 
            - Если будут говорить ек-змед или екзмед или еказмед или ecosmed или exmed то просто знай что распознование слова "е-кызмет" плоховато работает. 
            - Вы подключены к приложению на моем компьютере. Я использую свой голос для общения с вами и превращаю свою речь в текст с помощью Whisper API от OpenAI. Бывает оно плохо распознаёт надеюсь ты поймёшь контекст запроса.
            - Я могу попросить выполнить задачу, связанную с выполнением какого-либо действия на моем компьютере, например открыть приложение (Даже если ты уже выполнял это просто выполни снова) или открыть браузер выполнить поиск информации в Google или открыть YouTube, а так же поиск новостей и прогноза погоды.
            - Всегда старайтесь выполнить задачу, если это не является невозможным.
            - на запросы открой или зайди отвечай "открываю" или "захожу".
            - Вы можете автоматически отправлять запросы через браузер для взаимодействия с другими ИИ, например, для поиска кандидатов на определенные должности.
            - также ты можешь видеть скрин и по этому скрину опредилять на какой текст или кнопку нажать в браузере или в другом приложении. Даже если ты уже нажимал на эту кнопку или выполнял это действие, просто выполните его снова(это важно для тестирования). 
            - Используя API ChatGPT, я позже передам вам функции которые позволят вам выполнять эти команды. Вы можете ещё выполнять целые списки заданий или команд в одном запросе! 
              Также я добавил API для новостей и погоды, чтобы вы могли получать последние новости и прогноз погоды, а также ты находишь вкладки  По номеру вкладки (общая нумерация)
            - Наконец, я также передам вам функцию под названием sleep(). Если пользователь больше не нуждается в помощи в данный момент или если вы предполагаете, что он закончил с вами разговаривать, обязательно вызовите функцию сна.
        """

# === Описание архитектуры приложения ===
APP_NAME = "Jarvis"
APP_VERSION = "1.0.0"
APP_DESCRIPTION = """
Jarvis - персональный ИИ-ассистент, который может управлять компьютером, отвечать на вопросы и выполнять задачи.

Основные возможности:
- Голосовое управление: распознавание речи с использованием Whisper API от OpenAI
- Голосовые ответы: использование ElevenLabs и Edge TTS для естественного общения
- Интеграция с ChatGPT: возможность общения с GPT через браузер
- Управление компьютером: открытие приложений, навигация по сайтам
- Автономные задачи: выполнение последовательностей действий в режиме автопилота

Архитектура:
- core/: ядро приложения
    - agent.py: основной агент, обрабатывающий запросы пользователя
    - config.py: конфигурация приложения
    - conversation.py: управление диалогом
    - gpt_service.py: сервис для работы с GPT
- utils/: утилиты
    - tts.py: синтез и распознавание речи
    - event_manager.py: управление событиями
    - window_manager.py: управление окнами
    - mock_modules.py: заглушки для GUI-зависимых библиотек
- commands/: команды для управления компьютером
    - commands.py: основные команды
    - commands_as_json.py: команды в формате JSON для функциональных вызовов
- integrations/: интеграции с внешними сервисами
    - browser_chat.py: взаимодействие с ChatGPT через браузер
    - orchestrator.py: оркестрация взаимодействия с внешними сервисами
    - prompt_enhancer.py: улучшение простых запросов пользователя в более сложные промпты для ChatGPT
- tests/: модульные тесты
    - test_mock_modules.py: тесты для заглушек модулей
    - test_tts.py: тесты для функций синтеза и распознавания речи
    - test_agent.py: тесты для модуля agent.py
    - test_commands_module.py: тесты для модуля commands.py

Процесс обработки запросов:
1. Пользователь отправляет запрос через веб-интерфейс или голосом
2. Запрос обрабатывается в gpt_service.py функцией handle_user_input
3. Если настроено использование браузера для всех запросов (USE_BROWSER_FOR_ALL_REQUESTS=1), 
   запрос направляется в функцию process_browser_chat
4. В process_browser_chat вызывается orchestrate_browser_chat из orchestrator.py
5. В orchestrator.py запрос передается в browser_chat.py функции send_query_to_chatgpt
6. Если включено улучшение промптов (ENHANCE_PROMPTS=1), запрос преобразуется с помощью prompt_enhancer.py
7. Браузер открывает ChatGPT, вводит запрос и получает ответ
8. Ответ возвращается пользователю и озвучивается с помощью TTS
"""