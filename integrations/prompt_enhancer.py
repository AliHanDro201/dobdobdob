# integrations/prompt_enhancer.py
"""
Модуль для преобразования простых запросов пользователя в более сложные промпты для ChatGPT.
"""

import logging
import random

# Настройка логирования
logger = logging.getLogger("prompt_enhancer")

# Шаблоны для различных типов запросов
GENERAL_TEMPLATES = [
    "Я хотел бы получить подробную информацию о следующем: {query}. Пожалуйста, предоставь исчерпывающий ответ с фактами и деталями.",
    "Мне нужна информация по теме: {query}. Можешь рассказать об этом подробно, включая ключевые аспекты и интересные факты?",
    "Расскажи мне всё, что ты знаешь о: {query}. Я хотел бы получить структурированный и информативный ответ.",
    "Я изучаю тему: {query}. Поделись, пожалуйста, своими знаниями, включая основные концепции и примеры.",
    "Объясни мне, пожалуйста, следующее: {query}. Я хотел бы получить понятное объяснение с примерами, если это возможно."
]

QUESTION_TEMPLATES = [
    "Я хотел бы узнать ответ на вопрос: {query}. Пожалуйста, предоставь подробный и точный ответ.",
    "У меня есть вопрос: {query}. Можешь дать мне исчерпывающий ответ с объяснением?",
    "Помоги мне разобраться с вопросом: {query}. Я хотел бы получить детальное объяснение.",
    "Мне интересно: {query}. Можешь объяснить это понятным языком с примерами?",
    "Я пытаюсь понять: {query}. Пожалуйста, дай мне подробный ответ с необходимым контекстом."
]

HOW_TO_TEMPLATES = [
    "Я хотел бы узнать, как выполнить следующее: {query}. Пожалуйста, предоставь пошаговую инструкцию.",
    "Можешь объяснить процесс: {query}? Мне нужна детальная инструкция с шагами и советами.",
    "Мне нужно руководство по: {query}. Пожалуйста, опиши процесс подробно, с указанием возможных проблем и их решений.",
    "Я пытаюсь разобраться, как: {query}. Можешь предоставить подробную инструкцию с примерами?",
    "Научи меня, пожалуйста: {query}. Я хотел бы получить пошаговое руководство с объяснениями каждого этапа."
]

COMPARISON_TEMPLATES = [
    "Я хотел бы сравнить: {query}. Пожалуйста, предоставь детальное сравнение, включая сходства и различия.",
    "Можешь сравнить для меня: {query}? Мне интересны ключевые отличия, преимущества и недостатки каждого варианта.",
    "Проведи, пожалуйста, сравнительный анализ: {query}. Я хотел бы увидеть объективное сравнение по различным параметрам.",
    "Я выбираю между: {query}. Помоги мне сравнить эти варианты по важным критериям.",
    "Какие основные различия между: {query}? Пожалуйста, предоставь подробное сравнение с учетом различных аспектов."
]

def enhance_prompt(query: str) -> str:
    """
    Преобразует простой запрос пользователя в более сложный промпт для ChatGPT.
    
    Args:
        query: Исходный запрос пользователя
        
    Returns:
        Улучшенный промпт для ChatGPT
    """
    query = query.strip()
    
    # Если запрос уже достаточно длинный и сложный, возвращаем его как есть
    if len(query.split()) > 15:
        logger.info(f"Запрос уже достаточно сложный, оставляем как есть: {query[:50]}...")
        return query
    
    # Определяем тип запроса
    query_lower = query.lower()
    
    # Выбираем подходящий шаблон в зависимости от типа запроса
    if query_lower.startswith(("как ", "каким образом ", "каким способом ", "научи ", "объясни как ")):
        templates = HOW_TO_TEMPLATES
        logger.info("Определен тип запроса: инструкция")
    elif query_lower.startswith(("сравни ", "в чем разница ", "чем отличается ", "какая разница ", "что лучше ")):
        templates = COMPARISON_TEMPLATES
        logger.info("Определен тип запроса: сравнение")
    elif any(q in query_lower for q in ["?", "что такое", "кто такой", "где находится", "когда был", "почему", "зачем"]):
        templates = QUESTION_TEMPLATES
        logger.info("Определен тип запроса: вопрос")
    else:
        templates = GENERAL_TEMPLATES
        logger.info("Определен тип запроса: общий")
    
    # Выбираем случайный шаблон из соответствующей категории
    template = random.choice(templates)
    
    # Формируем улучшенный промпт
    enhanced_prompt = template.format(query=query)
    
    logger.info(f"Исходный запрос: {query}")
    logger.info(f"Улучшенный промпт: {enhanced_prompt}")
    
    return enhanced_prompt

# Пример использования
if __name__ == "__main__":
    # Настройка логирования для тестирования
    logging.basicConfig(level=logging.INFO)
    
    test_queries = [
        "Что такое квантовая физика?",
        "Как приготовить борщ?",
        "Сравни Python и JavaScript",
        "Расскажи о Казахстане",
        "Почему небо голубое?",
        "Я хотел бы узнать подробную информацию о последних достижениях в области искусственного интеллекта, особенно в контексте обработки естественного языка и генерации текста."
    ]
    
    for query in test_queries:
        enhanced = enhance_prompt(query)
        print(f"\nИсходный: {query}")
        print(f"Улучшенный: {enhanced}")